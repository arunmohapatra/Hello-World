MCP Server for Spinnaker:
Setting up an MCP server involves creating an HTTP interface that translates standardized MCP 
requests into Spinnaker API calls. This enables AI agents to securely and efficiently interact 
with Spinnaker pipelines and workflows. Key tasks include mapping MCP contexts and intents to 
Spinnaker operations, handling authentication, enforcing validation and guardrails, 
and ensuring comprehensive logging and observability. Challenges include managing 
Spinnaker’s API complexity, maintaining security, keeping up with evolving MCP standards, 
and enabling effective debugging.

MCP Protocol Pros and Cons:
The MCP protocol offers a standardized, language-agnostic way for AI agents to 
communicate with diverse systems via intent-context modeling, facilitating flexible integrations 
with minimal custom adapters. However, it is still an emerging standard with limited tooling and adoption, 
which may introduce instability and extra development effort during early implementation.



-------------------------
Save the above YAML into a file, e.g. delegate-configmap.yaml.

Apply it to your EKS cluster:
  kubectl apply -f delegate-configmap.yaml
Mount it in your delegate Deployment so that it’s available at:
  /opt/harness-delegate/config/delegate-config.yaml
Example snippet for Deployment (delegate pod spec):
          volumeMounts:
        - name: delegate-config
          mountPath: /opt/harness-delegate/config/delegate-config.yaml
          subPath: delegate-config.yaml
      volumes:
      - name: delegate-config
        configMap:
          name: delegate-config

----------------------
Here are the top 5 key features Harness supports for Continuous Delivery/DevOps:

1. Continuous Delivery (CD) with Smart Automation

  Automates deployments across Kubernetes, ECS, EKS, EC2, and other platforms.
  Supports advanced deployment strategies like Blue/Green, Canary, and Rolling.

2. Built-in CI/CD Pipelines with GitOps

  Native integration for CI and CD in one platform.
  GitOps support for managing deployments declaratively via Git repos.

3. Feature Flags

  Toggle features on/off without redeploying code.  
  Enables progressive rollouts and safe experimentation.

4. Cloud Cost Management (CCM)

  Provides visibility into cloud spend across AWS, Azure, and GCP.
  Suggests optimizations and governance to reduce costs.



Could you please provide more details on how pipeline metadata is stored and encrypted within Harness? Specifically, we’d like to understand where the metadata is stored (e.g., Harness-managed database, GCP/AWS storage, etc.), the encryption mechanisms in place, key management practices, and where the encryption keys are stored.

Does Harness support TLS 1.3 for all internal and external communications (e.g., between delegate, Harness SaaS services, and external integrations)? If yes, could you confirm whether it is enforced by default or configurable?

Is there an option for customers to use customer-managed encryption keys (CMKs) for pipeline metadata encryption, instead of relying solely on Harness-managed keys? If yes, please share details on how this can be configured and managed.

5. Governance, Security, and Compliance

  OPA-based policy enforcement.
  Role-based access control (RBAC) and SSO with SAML/OIDC.
  Audit trails for all deployment and pipeline activities.
